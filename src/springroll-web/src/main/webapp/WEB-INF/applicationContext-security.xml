<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:sec="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <!--
    Why do we have two instances of a Session Registry ?
    When a user logs in 'RegisterSessionAuthenticationStrategy' both registries are updated with the logged in user.
    When a user impersonates some other user (and when the impersonator logs out) the 'sessionRegistryForDelegation'
    instance is updated accordingly. However the instance 'sessionRegistry' is NOT updated during impersonation.
    Why? If we dont do this, then when user 'A' logs in and then impersonates user 'B' and after which user 'A' tries to
    login in a different system the prevention of concurrent login will fail.
    IF we dont update 'sessionRegistryForDelegation' during impersonation then the websocket mapping to user will still point
    to user A even though user A is now impersonating user B
    -->
    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>
    <bean id="sessionRegistryForDelegation" class="org.springframework.security.core.session.SessionRegistryImpl"/>

    <sec:http use-expressions="true">
        <sec:intercept-url pattern="/favicon.ico" access="permitAll" />
        <sec:intercept-url pattern="/assets/**" access="permitAll" />
        <!--<sec:intercept-url pattern="/Err_401.jsp" access="permitAll" />-->
        <!--<sec:intercept-url pattern="/Err_500.jsp" access="permitAll" />-->
        <!--<sec:intercept-url pattern="/Err_Timeout.jsp" access="permitAll" />-->
        <sec:intercept-url pattern="/monitoring*" access="permitAll" />
        <!--<sec:intercept-url pattern="/login*" access="permitAll" requires-channel="https"/>-->
        <sec:intercept-url pattern="/login*" access="permitAll" />
        <sec:intercept-url pattern="/public/**" access="permitAll" />
        <sec:intercept-url pattern="/api/public/**" access="permitAll"  />
        <sec:intercept-url pattern="/api/**" access="isAuthenticated()" />
        <sec:intercept-url pattern="/**" access="isAuthenticated()" />
        <sec:custom-filter ref="switchUserFilter" position="SWITCH_USER_FILTER"/>
        <sec:session-management session-authentication-strategy-ref="compositeSessionAuthenticationStrategy" />
        <!--<sec:request-cache ref="requestCache"/>-->
        <sec:form-login/>
        <!--<sec:form-login login-page="/login.jsp" default-target-url="${application.server.home}" always-use-default-target="true"/>-->
        <sec:logout delete-cookies="JSESSIONID" invalidate-session="true"/>
        <sec:csrf disabled="false"/>
        <sec:port-mappings>
            <sec:port-mapping http="${application.server.port}" https="${application.server.port.secure}"/>
        </sec:port-mappings>
    </sec:http>

    <bean id="userDetailsService" class="com.springroll.api.facade.security.SpringrollUserDetailsService">
        <property name="mappedUserName" value="${ldap.mapped.username}"/>
        <property name="mappedDisplayName" value="${ldap.mapped.displayname}"/>
    </bean>
    <bean id="switchUserFilter" class="com.springroll.api.facade.security.SwitchUserFilter">
        <property name="userDetailsService" ref="userDetailsService"/>
        <!--<property name="targetUrl" value="/"/>-->
        <property name="successHandler" ref="userDetailsService"/>
        <property name="sessionRegistry" ref="sessionRegistryForDelegation"/>
    </bean>

    <sec:authentication-manager erase-credentials="true">
        <sec:authentication-provider ref="authenticationProvider"/>
    </sec:authentication-manager>

    <bean id="authenticationProvider" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
        <constructor-arg>
            <bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
                <constructor-arg ref="contextSource"/>
                <property name="userSearch" ref="userSearch"/>
            </bean>
        </constructor-arg>
        <constructor-arg ref="userDetailsService"/>
        <property name="userDetailsContextMapper" ref="userDetailsService"/>
    </bean>

    <bean id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
        <constructor-arg value="${ldap.authentication.server.urls}/${ldap.authentication.basedn}"/>
        <!--<property name="userDn" value="${ldap.admin}"/>-->
        <!--<property name="password" value="${ldap.password}"/>-->
    </bean>


    <bean id="userSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
        <constructor-arg index="0" value=""/>
        <constructor-arg index="1" value="${ldap.authentication.searchFilter}"/>
        <constructor-arg index="2" ref="contextSource" />
    </bean>

    <bean id="compositeSessionAuthenticationStrategy" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
        <constructor-arg>
            <list>
                <bean class="com.springroll.api.facade.security.ConcurrentSessionControlAuthenticationStrategy">
                    <constructor-arg ref="sessionRegistry"/>
                    <property name="maximumSessions" value="${maxSessionsPerUser}" />
                    <property name="exceptionIfMaximumExceeded" value="${blockNewLoginWhenMaxExceeded}" />
                    <property name="blockDelegatedUsers" value="${blockDelegatedUsers}" />
                </bean>
                <bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy">
                </bean>
                <bean class="com.springroll.api.facade.security.RegisterSessionAuthenticationStrategy">
                    <constructor-arg ref="sessionRegistry"/>
                    <constructor-arg ref="sessionRegistryForDelegation"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean class="com.springroll.notification.WebSocketSessionListener">
        <property name="sessionRegistry"  ref="sessionRegistryForDelegation"/>
    </bean>

</beans>
